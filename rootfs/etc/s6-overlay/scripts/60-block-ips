#!/command/with-contenv bash
#shellcheck shell=bash disable=SC2145
#
# This init script disables IPV6 if the IPV6 env variable is set to "disabled" or "off"
# This is necessary to deal with systems that have IPV6 switched off - if we don't do this,
# the nginx test run in 99-test-webproxy will fail.

# shellcheck disable=SC1091
source /scripts/common

cp -f /root/manage_ipblock /usr/local/bin >/dev/null 2>&1

if ! chk_enabled "$IPTABLES_BLOCK" || [[ -z "$BLOCKBOT" ]]; then
  # shellcheck disable=SC2154
  "${s6wrap[@]}" echo "Bot blocking is not enabled. Continuing..."
  exit 0
fi

function conv_blocklist () {
  # This function converts the ip-blocklist from an older format and ensures it's homogenized

  if [[ ! -f /run/nginx/ip-blocklist ]]
  then
    # Nothing to convert
    return 0
  fi

  read -r firstline < /run/nginx/ip-blocklist
  if [[ "$firstline" == "# IP Blocklist for the docker-reversewebproxy container" ]]
  then
    # the ip-blocklist file was already converted; no need to do it again
    return 0
  fi

  # Copy the template into place:
  cp /root/ip-blocklist-template /tmp/ip-blocklist

  while read -ra line
  do
    [[ -z "${line[*]}" ]] && continue
    if [[ "${line[0]:0:1}" == "#" ]]
    then
      echo "${line[*]}" >> /tmp/ip-blocklist
      continue
    fi
    [[ -z "${line[1]}" ]] && line[1]="converted"
    [[ -z "${line[2]}" ]] && line[2]="$(date +%s)"
    [[ "${line[2]:0:4}" == "2022" ]] && line[2]="$(date -d "${line[2]:0:4}/${line[2]:4:2}/${line[2]:6:2} ${line[2]:9:2}:${line[2]:11:2}:${line[2]:13:2} ${line[2]:16:3}" +%s)"
    echo "${line[*]}" >> /tmp/ip-blocklist
  done < /run/nginx/ip-blocklist
  mv -f /tmp/ip-blocklist /run/nginx/ip-blocklist
  "${s6wrap[@]}" echo "ip-blocklist file has been converted to the new format."
  return 0
}
# enable logging:

sed -i 's|\(^\s*access_log\).*|\1 /var/log/nginx/access.log ;|' /etc/nginx/nginx.conf
sed -i 's|\(^\s*error_log\).*|\1 /var/log/nginx/error.log ;|' /etc/nginx/nginx.conf

# no longer needed: # Convert old format blocklist file if needed:
# conv_blocklist

# add external IP to allow list:
extip="$(curl -sSL ipinfo.io/ip)"
if [[ -n "$extip" ]]; then
  if [[ -f /run/nginx/ip-allowlist ]] && grep -q "#external-ip" /run/nginx/ip-allowlist; then
    sed -i 's/^.*\(\s\+#external-ip\)$/'"$extip"'\1/g' /run/nginx/ip-allowlist
  else
    echo "$extip #external-ip" >> /run/nginx/ip-allowlist
  fi
fi

# read and add any blocked IPs. This can all be done in the background so we don't hold up the process when the list is long:
{
  blocktable=()
  if [[ -f /run/nginx/ip-blocklist ]]
  then
    list_len="$(wc -l < /run/nginx/ip-blocklist)"
    counter=0
    dsp="$((list_len / 10 + 1))"
    if [[ -f /run/nginx/ip-allowlist ]]; then allowlist="$(</run/nginx/ip-allowlist)"; fi
    while read -ra line
    do
      if (( list_len > 500 )) && ! (( counter++ % dsp )); then
        "${s6wrap[@]}" echo "Processed $(( (counter*100)/list_len ))% of the ip-blocklist"
      fi
      if [[ -n "${line[0]}" ]] && [[ "${line[0]:0:1}" != "#" ]] && ! [[ $allowlist =~ ${line[0]} ]]
      then
        # add the IP from the first field of the line to the iptables block list if...
        # - the line isn't empty
        # - the first field of the line doesn't start with "#" (in which case it's a comment)
        # - the IP isn't in the ip-allowlist (if that file exists)
        # - the IP isn't already in the iptables block list
        if [[ ${line[0]} =~ ^[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$ ]]; then line[0]="${line[0]}/24"
        elif [[ ${line[0]} =~ ^[[:digit:]]+\.[[:digit:]]+$ ]]; then line[0]="${line[0]}/16"
        elif [[ ${line[0]} =~ ^[[:digit:]]+$ ]]; then line[0]="${line[0]}/8"
        fi
        iptables -I INPUT -s "${line[0]}" -j DROP >/dev/null 2>&1
        blocktable+=("${line[0]}")
      fi
    done < /run/nginx/ip-blocklist
  else
    # There's no blocklist. Let's copy the template into place:
    cp /root/ip-blocklist-template /run/nginx/ip-blocklist
  fi

  if (( ${#blocktable[@]} > 0 ))
  then
    "${s6wrap[@]}" echo "These ${#blocktable[@]} IPs were blocked previously and have been added to the iptables block list:"
    "${s6wrap[@]}" echo "${blocktable[@]}"
  else
    "${s6wrap[@]}" echo "No previous iptables block list found. Continuing..."
  fi
} &