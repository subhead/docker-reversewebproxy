#!/command/with-contenv bash
#shellcheck shell=bash disable=SC2145,SC2154

# shellcheck disable=SC1091
source /scripts/common

SLEEPTIME=60
CHECK_EXT_IP_IVAL=1500
last_ext_ip_check="$(date +%s)"

# check if the IPTABLES_BLOCK is not enabled and if so, stop execution of this service:
if ! chk_enabled "$IPTABLES_BLOCK" || [[ -z "$BLOCKBOT" ]]; then
  "${s6wrap[@]}" echo "Bot blocking is disabled"
  sleep infinity
fi

"${s6wrap[@]}" echo "Started as an s6 service"

while true; do

  # Sleep a while before checking everything:
  sleep $SLEEPTIME
  "${s6wrap[@]}" echo "Starting block-ip check"
  # Once every $CHECK_EXT_IP_IVAL secs, check if the external IP address is still the same, and add it to the allow-list if needed
  if (( $(date +%s) > last_ext_ip_check + CHECK_EXT_IP_IVAL )); then
    extip="$(curl -sSL ipinfo.io/ip)"
    if [[ -n "$extip" ]]; then
      last_ext_ip_check="$(date +%s)"
      if [[ -f /run/nginx/ip-allowlist ]] && grep -q "#external-ip" /run/nginx/ip-allowlist; then
        sed -i 's/^.*\(\s\+#external-ip\)$/'"$extip"'\1/g' /run/nginx/ip-allowlist
      else
        echo "$extip #external-ip" >> /run/nginx/ip-allowlist
      fi
    fi
  fi

  # Do stuff if the access log file exists. Sometimes, it doesn't exist if there isn't much traffic
  if [[ -f /var/log/nginx/access.log ]]; then
    old_blocklist="$(</run/nginx/ip-blocklist)"
    # Read access log and process any GEOIP or BLOCKBOT response codes. Note - also naturally occurring responses with these codes are picked up:
    awk -v "g=$GEOIP_RESPONSECODE" -v "b=$BLOCKBOT_RESPONSECODE" -v "d=$(date +%s)" '{if ($9 == b) {print $1 " geo_blocked " d} else if ($9 == g) {print $1 " bot_blocked " d}}' /var/log/nginx/access.log >> /run/nginx/ip-blocklist

    # Remove IPs that don't have user agents:
    if chk_enabled "$IPTABLES_BLOCK_NO_USERAGENT"; then
      awk  -v "d=$(date +%s)" 'BEGIN {FS="[[:space:]]*[][\"][[:space:]]*"; OFS = ","}{if ($8 == "" || $8 == "-") {sub(" - -","",$1); print $1 " no_user_agent " d}}' /var/log/nginx/access.log | sort -u >> /run/nginx/ip-blocklist
    fi

    # Read $BLOCKBOT into an array and remove all leading/trailing spaces:
    readarray -d "," -t BOT_ARRAY <<< "$BLOCKBOT"
    for ((n=0; n<${#BOT_ARRAY[*]}; n++))
    do
      # this is slightly inefficient as it iterates through the entire array.
      # However, all-at-once solutions like "y=($(printf '%s\n' "${x[@]}"|xargs))" appear to split each element at any internal whitespace :(
      BOT_ARRAY[n]="$(xargs <<< "${BOT_ARRAY[n]}")"
    done
    # Parse through the log files and to the blocklist.
    # It's OK to add duplicates; `sort -u` will only keep the first (oldest) occurrence
    grep -i -h -w -f <(printf '%s\n' "${BOT_ARRAY[@]}") /var/log/nginx/access.log 2>/dev/null | awk -v "d=$(date +%s)" '{print $1 " logs_crawler " d}' >> /run/nginx/ip-blocklist

    sort -u -k 1,1 /run/nginx/ip-blocklist | sort -n > /tmp/ip-blocklist
    mv -f /tmp/ip-blocklist /run/nginx/ip-blocklist

    # Re-process the blocklist and add them to the IP tables for DROPping:
    blocktable=()
    if [[ -f /run/nginx/ip-blocklist ]]
    then
      while read -ra line
      do
        if [[ -n "${line[0]}" ]] && [[ "${line[0]:0:1}" != "#" ]] && ! [[ $old_blocklist =~ ${line[0]} ]]; then
          if [[ ${line[0]} =~ ^[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$ ]]; then line[0]="${line[0]}/24"
          elif [[ ${line[0]} =~ ^[[:digit:]]+\.[[:digit:]]+$ ]]; then line[0]="${line[0]}/16"
          elif [[ ${line[0]} =~ ^[[:digit:]]+$ ]]; then line[0]="${line[0]}/8"
          fi
          iptables -I INPUT -s "${line[0]}" -j DROP >/dev/null 2>&1
          blocktable+=("${line[0]}")
        fi
      done < /run/nginx/ip-blocklist
    fi

    # Notify the logs of any additions to the blocklist:
    if (( ${#blocktable[@]} > 0 ))
    then
      "${s6wrap[@]}" echo "These ${#blocktable[@]} IP(s) have been added to the iptables Block List: ${blocktable[@]}. Currently, there are $(sed -e '/^$/d ; /^#/d' /run/nginx/ip-blocklist |wc -l) blocked IP addresses."
    fi

    # Go through the blocklist and determine if any entries have timed out:
    if (( IPJAILTIME > 0 ))
    then
      deletes=()
      cp /run/nginx/ip-blocklist /tmp
      allowlist="$(</run/nginx/ip-allowlist)"
      while read -ra line
      do
        if [[ -n "${line[2]}" ]] \
           && [[ -n "${line[0]}" ]] \
           && [[ "${line[0]:0:1}" != "#" ]] \
           && [[ "${line[1]}" != "manual_add" ]] \
           && (( line[2] > 0 )) \
           && (( line[2] + IPJAILTIME < $(date +%s) )) \
           || { [[ -n "${line[0]}" ]] && [[ "${line[0]:0:1}" != "#" ]] && [[ $allowlist =~ ${line[0]} ]]; }
        then
          sed -i '/^'"${line[0]}"'/d' /run/nginx/ip-blocklist
          if [[ ${line[0]} =~ ^[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$ ]]; then line[0]="${line[0]}/24"
          elif [[ ${line[0]} =~ ^[[:digit:]]+\.[[:digit:]]+$ ]]; then line[0]="${line[0]}/16"
          elif [[ ${line[0]} =~ ^[[:digit:]]+$ ]]; then line[0]="${line[0]}/8"
          fi
          iptables -D INPUT -s "${line[0]}" -j DROP >/dev/null 2>&1
          deletes+=("${line[0]}")
        fi
      done < /tmp/ip-blocklist
      rm -f /tmp/ip-blocklist
      if [[ "${#deletes[*]}" -gt 0 ]]; then
        "${s6wrap[@]}" echo "These ${#deletes[@]} IP(s) have timed out and have been removed from the Block List: ${deletes[@]}. Currently, there are $(sed -e '/^$/d ; /^#/d' /run/nginx/ip-blocklist |wc -l) blocked IP addresses."
      fi
    fi
  fi
  "${s6wrap[@]}" echo "Done. Next check will start at $(date -d @$(( $(date +%s) + SLEEPTIME )))" 
done
